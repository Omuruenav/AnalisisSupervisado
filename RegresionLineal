import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

#Cargar Datos
Data = pd.read_csv('./Cardetails.csv')

#Mostrar Datos
Data.head(5)
#Descripcion de los datos
Data.describe()
# Manejar datos faltantes
Data.replace(0, np.nan, inplace=True)
Data.fillna(Data.mean(numeric_only=True), inplace=True)
Data.fillna('NA',inplace=True)
#Mostrar Datos
Data.head(5)
# Confirmacion de columnas
print(Data.columns)
# Análisis exploratorio de datos

# Variable "asientos"
plt.figure(figsize=(6, 3))
sns.boxplot(x=Data['asientos'])
plt.title('Identificación de Datos Atípicos', fontsize=10)

# Variable "ano"
plt.figure(figsize=(6, 3))
sns.boxplot(x=Data['ano'])

# Variable "precio_de venta"
plt.figure(figsize=(6, 3))
sns.boxplot(x=Data['precio_de_venta'])

# Variable "km_recorridos"
plt.figure(figsize=(6, 3))
sns.boxplot(x=Data['km_recorridos'])
# Definir límites para datos atípicos
max_asientos = 10
min_asientos = 2
total_asientos = ((Data['asientos'] < min_asientos) | (Data['asientos'] > max_asientos)).sum()

max_ano = 2020
min_ano = 1990
total_ano = ((Data['ano'] < min_ano) | (Data['ano'] > max_ano)).sum()

print("Total registros dataset: {}".format(len(Data)))
print("El total de datos atípicos para la cantidad de asientos es {}".format(total_asientos))
print("El total de datos atípicos para el año es {}".format(total_ano))
print("")
Data.info()
#Ajustar columnas tipo object para poder procesarlos en el modelo

data_numerica = Data.copy()
for column in data_numerica.columns:
    if data_numerica[column].dtype == 'object':
        label_encoder = LabelEncoder()
        data_numerica[column] = label_encoder.fit_transform(data_numerica[column])
# Dividir los datos en conjunto de entrenamiento y prueba
X = data_numerica.drop('precio_de_venta', axis=1)
Y = data_numerica['precio_de_venta']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)
#Validar datos en train
X_train.head(2)
#Validar datos en test
X_test.head(2)
# Crear y entrenar el modelo de regresión lineal
modelo_regresion = LinearRegression()
modelo_regresion.fit(X_train, Y_train)
# Realizar predicciones
Prediccion = modelo_regresion.predict(X_test)
# Evaluar el modelo
print('Coeficientes:', modelo_regresion.coef_)
print('Error cuadrático medio:', mean_squared_error(Y_test, Prediccion))
print('Coeficiente de determinación (R^2):', r2_score(Y_test, Prediccion))
# Visualizar el rendimiento del modelo
plt.scatter(Y_test, Prediccion)
plt.xlabel("Valores reales")
plt.ylabel("Predicciones")
plt.title("Rendimiento del modelo de regresión lineal")
plt.show()
